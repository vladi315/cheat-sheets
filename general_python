Decorators
can be used to modify a function and to perform custom code before and after.

def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

@my_decorator # @my_decorator is an easier way of saying "say_whee = my_decorator(say_whee)"
def say_whee():
    print("Whee!")
    

# >>> say_whee() yields:
Something is happening before the function is called.
Whee!
Something is happening after the function is called.
